<launch>
  <env name="GAZEBO_MODEL_PATH" value="$(find robocar_description)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="$(find robocar_description)"/>

  <arg name="simulation" default="0" />
  <arg name="camera" default="1" />
  <arg name="camera_params" default="$(find robocar_config)/camera_calibration.yaml"/>
  <arg name="arduino_port" default="/dev/ttyUSB0" />
  <arg name="goal_mode" default="forward" />
  <!-- <arg name="world_name" default="$(find robocar_description)/urdf/road_boxes2.world"/> -->
  <!-- <arg name="world_name" default="$(find robocar_description)/urdf/road.world"/> -->
  <arg name="world_name" default="$(find robocar_description)/urdf/conde.world"/>

  <group if="$(arg simulation)">
    <include file="$(find robocar_description)/launch/diffdrive.launch">
        <arg name="world_name"      value="$(arg world_name)"/>
    </include> 
  </group>

  <group if="$(arg camera)">
    <include file="$(find raspicam_node)/launch/camerav2_1280x960_10fps.launch">
    </include>  

    <node name="dynamic_reconfigure_load_camera" pkg="robocar_config" type="dynparam" args="load /raspicam_node $(find robocar_config)/camera_settings.yaml" />
  </group>

  <group unless="$(arg simulation)">
    <param name="/use_sim_time" value="false"/>

    <node name="serial_node" pkg="pwm_radio_arduino" type="rosserial_python2_bridge.py" args="$(arg arduino_port) _baud:=115200" output="screen" /> 

    
    <!-- If sensors are no connected. We can generate some fake data. -->
    <node pkg="rostopic" type="rostopic" name="fake_avoid_obstacles"
    args="pub -r 15 -s /heading/avoid_obstacles geometry_msgs/Vector3Stamped '{header: auto, vector: [0.0, 0.0, 0.0]}'" /> 
    <node pkg="rostopic" type="rostopic" name="fake_at_obstacle"
    args="pub -r 15 -s /heading/at_obstacle geometry_msgs/Vector3Stamped '{header: auto, vector: [0.0, 0.0, 0.0]}'" /> 

    <node name="mouse_odometry" pkg="mouse_odometry" type="mouse_odometry.py" output="screen" />

  </group>
  
  <node type="obstacle_detection.py" pkg="avoid_obstacles" name="obstacle_detection" output="screen">
  </node>

  <node type="pid_supervisor.py" pkg="pid_controller" name="pid_supervisor" output="screen">
  </node>
  
  <node type="gtg.py" pkg="pid_controller" name="gtg" output="screen" >
    <param name="mode" type="string" value="$(arg goal_mode)" />
  </node>

</launch>
